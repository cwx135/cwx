
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Administrator
 */
public class Server extends javax.swing.JFrame {

    private ServerSocket serverSocket;
    private ServerThread st;
    private DataOutputStream dos;
    private DataInputStream dis;
    public ArrayList<String> users = new ArrayList<String>();
    private int usersLength = 0;
    private Thread ul;
    private String usermessage = null;
    public ArrayList<Socket> lists = new ArrayList<Socket>();
    private boolean isStart = false;

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        this.setTitle("聊天室-服务器");
        myip();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("本地IP：");

        jTextField1.setText("127.0.0.1");

        jLabel2.setText("端口：");

        jTextField2.setText("8888");

        jButton1.setText("启动");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("停止");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setFocusable(false);
        jScrollPane1.setRowHeaderView(jTextArea1);
        jScrollPane1.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTextArea1);
        jScrollPane1.setWheelScrollingEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("");
        jTextArea1.setAlignmentX(1.0F);
        jTextArea1.setAlignmentY(1.0F);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "在线客户"));
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextArea1.setMinimumSize(new java.awt.Dimension(50, 50));
        jTextArea1.setName(""); // NOI18N
        jTextArea1.setRequestFocusEnabled(false);
        jTextArea1.setSelectionEnd(1);
        jTextArea1.setSelectionStart(1);
        jTextArea1.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleName("");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setText("用户数： ");

        jButton3.setText("发送");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jScrollPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //启动键
        if (jTextField2.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "端口号不能为空", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (isStart == false) {
            try {
                serverSocket = new ServerSocket(Integer.parseInt(jTextField2.getText()));
                jTextArea2.append("\n");
                jTextArea2.append("服务器已开启");
                st = new ServerThread(serverSocket);
                st.start();
                jTextField2.setEditable(false);
                jButton1.setEnabled(false);
                jButton2.setEnabled(true);
                isStart = true;
                ul = new UserList();
                ul.start();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //断开键
        try {
            jTextArea2.append("\n");
            jTextArea2.append("服务器已断开");
            jTextArea2.setCaretPosition(jTextArea2.getDocument().getLength());
            if (dis != null) {
                dis.close();
            }
            if (dos != null) {
                dos.close();
            }
            users.removeAll(users);
            jTextArea1.setText("");
            usersLength = 0;
            serverSocket.close();
            jTextField2.setEditable(true);
            jButton1.setEnabled(true);
            jButton2.setEnabled(false);
            isStart = false;
            ul.stop();
            st.stop();
        } catch (IOException e1) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //发送键
        if (usersLength == 0) {
            JOptionPane.showMessageDialog(null, "当前没有用户在线", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jTextField3.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "消息不能为空", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String line = "服务器：" + jTextField3.getText();
        sendMessage(line);
        jTextField3.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void myip() {
        JTextField IP = jTextField1;
        String ipAddress = null;
        try {
            ipAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
        }
        IP.setText(ipAddress);
        IP.setEditable(false);
    }

    private class MSThread implements Runnable {

        private Socket socket;
        private DataInputStream dis;

        public MSThread(Socket socket) {
            try {
                this.socket = socket;
                dis = new DataInputStream(socket.getInputStream());
            } catch (IOException e) {
            }
        }

        @Override
        public void run() {
            String message;
            try {
                while (true) {
                    message = dis.readUTF();

                    if (message.contains("进入了聊天室") && !message.contains("：")) {
                        users.add(message.split(" ")[0]);

                    }
                    if (message.contains("离开了聊天室") && !message.contains("：")) {
                        users.remove(message.split(" ")[0]);
                        sendMessage(message);
                        dis.close();
                        socket.close();
                        lists.remove(socket);

                    } else {
                        sendMessage(message);
                    }
                    // jTextField3.setText(Integer.toString(usersLength));
                }
            } catch (IOException e) {
                lists.remove(socket);
            }
        }
    }

    public void sendMessage(String str) {
        //发信息
        try {
            for (int i = 0; i < lists.size(); i++) {
                dos = new DataOutputStream(lists.get(i).getOutputStream());
                dos.writeUTF(str);
            }
        } catch (IOException e) {
        }
        System.out.println(str);
        jTextArea2.append("\n");
        jTextArea2.append(str);
        jTextArea2.setCaretPosition(jTextArea2.getDocument().getLength());
    }

    public void sendUserMessage(String str) {
        //发送用户表
        
        try {
            for (int i = 0; i < lists.size(); i++) {
                dos = new DataOutputStream(lists.get(i).getOutputStream());
                dos.writeUTF(str);
            }
        } catch (IOException e) {
        }
    }

    public class ServerThread extends Thread {

        private final ServerSocket serverSocket;

        public ServerThread(ServerSocket serverSocket) {
            this.serverSocket = serverSocket;
        }

        @Override
        public void run() {
            while (true) {
                Socket soket;
                try {
                    soket = serverSocket.accept();
                    new Thread(new MSThread(soket)).start();
                    lists.add(soket);
                } catch (IOException e) {
                }
            }
        }
    }

    public class UserList extends Thread {

        @Override
        public void run() {
            while (true) {
                if (users.size() != usersLength) {
                    jTextArea1.setText("");
                    usermessage = "";
                    users.forEach((s) -> {
                        usermessage = usermessage + s + "\n ";
                    });
                    usersLength = users.size();
                    sendUserMessage(usermessage + "@在线用户列表@");
                    jTextArea1.setText(usermessage);
                }
                jLabel3.setText("用户数：  " + usersLength);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Server().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public volatile javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public volatile javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextArea jTextArea2;
    private static javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField jTextField2;
    private static javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
